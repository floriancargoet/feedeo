<project name="Feedeo" default="deploy" basedir=".">
  <description>A build file for the Feedeo web application</description>

  <property name="server" location="../server"/>
  <property name="client" location="../client"/>
  <property name="dist" location="../dist"/>

  <property name="src" location="${server}/src"/>
  <property name="build" location="${server}/build"/>
  <property name="lib" location="${server}/lib"/>
  <property name="web" location="${server}/web"/>

  <path id="feedeo.classpath">
    <pathelement path="${classpath}"/>
    <fileset dir="${lib}">
      <include name="**/*.jar"/>
    </fileset>
    <pathelement path="${tomcat-path}/lib/servlet-api.jar"/>
  </path>


  <property name="client-build" location="${dist}/client-build"/>
  <property name="web-app" location="${dist}/web-app"/>

  <!-- First attempts to load properties from config/user.properties; then will load config/default.properties -->
  <property file="config/user.properties"/>
  <property file="config/default.properties"/>

  <!-- Should be replaced by the corresponding context value. -->
  <property name="context" value="feedeo"/>
 
  <!-- This property is a message returned when a property is not present. -->
  <property name="nodef.message" value="must be defined, in the config/user.properties (use default.properties as a model)"/>
  <target name="init">
    <!-- Create the time stamp -->
    <tstamp/>
  </target>

  <target name="build" depends="init, build-client, build-server"
        description="compile the source by calling the two other ant build files" >
  </target>

  <target name="build-client"> 
    <!-- TODO: Vrai build du client (concatÃ©nation, suppression des trucs de debug/test). -->
    <copy todir="${client-build}">
      <fileset dir="${client}" includes="**/*"/>
    </copy>
  </target>

  <target name="build-server"> 
    <!-- The tomcat path property should be changed to match your own tomcat installation path (or a symlink to it). -->
    <fail message="tomcat-path ${nodef.message}" unless="tomcat-path"/>
    <!-- Compile the java code from ${src} into ${build} -->
    <javac srcdir="${src}" destdir="${build}" classpathref="feedeo.classpath"/>
    <!-- Copy non-java resources from ${src} into ${build} -->
    <copy todir="${build}">
      <fileset dir="${src}">
        <include name="**/*"/>
        <exclude name="**/*.java"/>
      </fileset>
    </copy>
    <!-- TODO: Replace the data in hibernate.cfg.xml (the "feedeo") with the appropriate context -->
  </target>

  <target name="deploy" depends="build"
        description="deploy the application to ${web-dir} as a self-sufficient, uncompressed application" >
    <!-- Create the web application directory -->
    <copy todir="${web-app}">
      <fileset dir="${web}" includes="**/*"/>
    </copy>
    <copy todir="${web-app}/WEB-INF/lib">
      <fileset dir="${lib}" includes="**/*"/>
    </copy>
    <copy todir="${web-app}/WEB-INF/classes">
      <fileset dir="${build}" includes="**/*"/>
    </copy>
    <copy todir="${web-app}/WEB-INF">
      <fileset dir="${client-build}" includes="**/*"/>
    </copy>
  </target>

  <target name="war" depends="build" 
        description="generate a war file for the application">
    <!-- Create the war file -->
    <war destfile="${dist}/Feedeo.war" webxml="${web}/WEB-INF/web.xml" manifest="${web}/META-INF/MANIFEST.MF">
      <lib dir="${lib}" includes="**/*.jar"/>
      <classes dir="${build}" includes="**/*"/>
      <webinf dir="${client-build}" includes="**/*"/>
    </war>
  </target>

  <target name="clean"
        description="clean up all files in dist and build" >
    <!-- Delete the ${build}/org and ${dist}/web-app directory trees -->
    <delete dir="${web-app}"/>
    <delete>
      <fileset dir="${dist}" includes="*"/>
    </delete>
    <delete dir="${build}/org"/>
    <delete>
      <fileset dir="${build}" includes="*"/>
    </delete>
    <delete>
      <fileset dir="${client-build}" includes="**/*"/>
    </delete>
  </target>
</project>
